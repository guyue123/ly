<?xml version="1.0"?>
<!--
xs:string
xs:decimal
xs:integer
xs:boolean
xs:date
xs:time
-->

<xs:schema version="1.0"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           targetNamespace="http://luoying.huliqing.name"
           xmlns="http://luoying.huliqing.name"
           elementFormDefault="qualified">
    
    <xs:include schemaLocation="./base.xsd" />
    
    <xs:element name="root">
        <xs:complexType>
            <xs:all>
                <xs:element ref="attributeBoolean" />
                <xs:element ref="attributeColor" />
                <xs:element ref="attributeFloat" />
                <xs:element ref="attributeGroup" />
                <xs:element ref="attributeInteger" />
                <xs:element ref="attributeLevelFloat" />
                <xs:element ref="attributeLevelInteger" />
                <xs:element ref="attributeLimitInteger" />
                <xs:element ref="attributeLong" />
                <xs:element ref="attributeRelateBoolean" />
                <xs:element ref="attributeString" />
                <xs:element ref="attributeStringList" />
                <xs:element ref="attributeVector2f" />
                <xs:element ref="attributeVector3f" />
                <xs:element ref="attributeVector4f" />
            </xs:all>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="attributeBoolean" >
        <xs:annotation>
            <xs:documentation>整数类型的属性</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="value" type="bool" >
                        <xs:annotation><xs:documentation>属性初始值</xs:documentation></xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="attributeColor" >
        <xs:annotation>
            <xs:documentation>整数类型的属性</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="value" type="xs:string" >
                        <xs:annotation><xs:documentation>颜色属性值，格式："r,g,b,a", 示例："1.0, 1.0, 1.0, 1.0"</xs:documentation></xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="attributeFloat" >
        <xs:annotation>
            <xs:documentation>整数类型的属性</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="value" type="xs:decimals" use="optional" >
                        <xs:annotation><xs:documentation>属性初始值, 可以是float或int值.</xs:documentation></xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="attributeGroup" >
        <xs:annotation>
            <xs:documentation>
                属性组
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="attributes" type="xs:string" use="required" >
                        <xs:annotation><xs:documentation>添加其它属性ID, 格式："attributeId1,attributeId2,..."</xs:documentation></xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="attributeInteger" >
        <xs:annotation>
            <xs:documentation>整数类型的属性</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="value" type="xs:integer" use="optional" >
                        <xs:annotation><xs:documentation>属性初始值，必须是int值.</xs:documentation></xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="attributeLevelFloat" >
        <xs:annotation>
            <xs:documentation>可以设置等级的属性,这种属性可以随着等级而改变属性值。</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="value" type="xs:decimals" use="optional" >
                        <xs:annotation><xs:documentation>属性初始值, int值.</xs:documentation></xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="level" type="xs:integer" use="optional" >
                        <xs:annotation><xs:documentation>属性的初始等级，默认"1"</xs:documentation></xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="levelEl" type="xs:string" use="optional" >
                        <xs:annotation>
                            <xs:documentation>
                                绑定一个等级类型的计算公式(el id), 必须是 level 类型的el. 属性通过这个el公式来计算属性的等级值。
                                如果没有设置这个公式，则设置属性的等级将没有意义。
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="attributeLevelInteger" >
        <xs:annotation>
            <xs:documentation>可以设置等级的属性,这种属性可以随着等级而改变属性值。</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="value" type="xs:integer" use="optional" >
                        <xs:annotation><xs:documentation>属性初始值, int值.</xs:documentation></xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="level" type="xs:integer" use="optional" >
                        <xs:annotation><xs:documentation>属性的初始等级，默认"1"</xs:documentation></xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="levelEl" type="xs:string" use="optional" >
                        <xs:annotation>
                            <xs:documentation>
                                绑定一个等级类型的计算公式(el id), 必须是 level 类型的el. 属性通过这个el公式来计算属性的等级值。
                                如果没有设置这个公式，则设置属性的等级将没有意义。
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="attributeLimitInteger" >
        <xs:annotation>
            <xs:documentation>可以限制取值范围的属性，这种属性可以通过设置minValue,maxValue或绑定一个
                其它属性来限制当前属性的取值范围。
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="value" type="xs:integer" use="optional" >
                        <xs:annotation><xs:documentation>属性初始值, int值.</xs:documentation></xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="minValue" type="xs:integer" use="optional" >
                        <xs:annotation><xs:documentation>最小值限制，int类型，如果设置了bindMinLimitAttribute则minValue将会被忽略</xs:documentation></xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="maxValue" type="xs:integer" use="optional" >
                        <xs:annotation><xs:documentation>最大值限制，int类型，如果设置了bindMaxLimitAttribute则maxValue将会被忽略</xs:documentation></xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="bindMinLimitAttribute" type="xs:string" use="optional" >
                        <xs:annotation><xs:documentation>bind NumberAttribute, 绑定一个属性"名称", 用这个属性的值来限制当前属性值的最小值。如果设置了这个值，则minValue的设置将会被忽略。</xs:documentation></xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="bindMaxLimitAttribute" type="xs:string" use="optional" >
                        <xs:annotation><xs:documentation>bind NumberAttribute, 绑定一个属性"名称", 用这个属性的值来限制当前属性值的最大值。如果设置了这个值，则maxValue的设置将会被忽略。</xs:documentation></xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="attributeLong" >
        <xs:annotation>
            <xs:documentation>Long类型的Number属性</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="value" type="xs:integer" use="optional" >
                        <xs:annotation><xs:documentation>属性初始值, long或int</xs:documentation></xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="attributeRelateBoolean" >
        <xs:annotation>
            <xs:documentation>具有联动功能的Boolean属性</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="value" type="bool" use="optional" >
                        <xs:annotation><xs:documentation>属性初始值,如果属性设置了valueEl则这个数值可能会在运行时重新计算。</xs:documentation></xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="refVars" type="xs:string" use="optional" >
                        <xs:annotation><xs:documentation>
                            关联要引用的属性（名称），只有关联后才可以在参数valueEl中使用，并且角色也必须配置有引用的属性才可以。
                            格式："varName=attributeName,varName2=attributeName2,...", 示例："health=attributeHealth, mana=attributeMana"
                        </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="valueEl" type="xs:string" use="optional" >
                        <xs:annotation><xs:documentation>
                                填写一条表达式, 表达式的值必须返回Boolean类型，示例: "#{health > 0 && mana > 0}", 表达式中的参数必须在refVars中设置了引用。
                                并且需要确保角色同时配置有所引用的属性。
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="attributeString" >
        <xs:annotation>
            <xs:documentation>整数类型的属性</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="value" type="xs:string" use="optional" >
                        <xs:annotation><xs:documentation>属性初始值, String类型</xs:documentation></xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="attributeStringList">
        <xs:annotation>
            <xs:documentation>字符串集合</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="value" type="xs:string" use="required" >
                        <xs:annotation><xs:documentation>格式：“value1,value2,...”</xs:documentation></xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="duplication" type="bool" use="optional" >
                        <xs:annotation>
                            <xs:documentation>
                                是否允许重复,默认情况下不允许存放重复元素, 比如已经有元素："apple,banana", 当再次添加元素"apple"时将会被忽略。
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="attributeVector2f">
        <xs:annotation>
            <xs:documentation>vector2f类型的属性</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="value" type="xs:string" use="required" >
                        <xs:annotation><xs:documentation>Vector2fAttribute类型，包含2个元素，格式：“x,y”</xs:documentation></xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="attributeVector3f">
        <xs:annotation>
            <xs:documentation>vector3f类型的属性</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="value" type="xs:string" use="required" >
                        <xs:annotation><xs:documentation>Vector3fAttribute类型，包含3个元素，格式：“x,y,z”</xs:documentation></xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="attributeVector4f">
        <xs:annotation>
            <xs:documentation>vector4f类型的属性</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="value" type="xs:string" use="required" >
                        <xs:annotation><xs:documentation>Vector4fAttribute类型，包含4个元素，格式：“x,y,z,w”</xs:documentation></xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:complexType name="attributeBase">
        <xs:complexContent>
            <xs:extension base="base">
                <xs:attribute name="name" type="xs:string" use="required" >
                    <xs:annotation>
                        <xs:documentation>
                            属性名称,每个属性都需要一个名称。
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
</xs:schema>

<?xml version="1.0"?>
<!--
xs:string
xs:decimal
xs:integer
xs:boolean
xs:date
xs:time
-->

<xs:schema version="1.0"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           targetNamespace="http://luoying.huliqing.name"
           xmlns="http://luoying.huliqing.name"
           elementFormDefault="qualified">
    
    <!--ModelEntity Object Base-->
    <xs:complexType name="entityModelBase" >
        <xs:complexContent>
            <xs:extension base="entityBase">
                <xs:attribute name="shadowMode" use="optional">
                    <xs:annotation><xs:documentation>投影模式，默认值Inherit</xs:documentation></xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="Off" />
                            <xs:enumeration value="Cast" />
                            <xs:enumeration value="Receive" />
                            <xs:enumeration value="CastAndReceive" />
                            <xs:enumeration value="Inherit" />
                        </xs:restriction>
                    </xs:simpleType>
                </xs:attribute>
                <xs:attribute name="cullHint" use="optional">
                    <xs:annotation><xs:documentation>剪裁方式，默认值Inherit</xs:documentation></xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="Inherit" />
                            <xs:enumeration value="Dynamic" />
                            <xs:enumeration value="Always" />
                            <xs:enumeration value="Never" />
                        </xs:restriction>
                    </xs:simpleType>
                </xs:attribute>
                <xs:attribute name="queueBucket" use="optional">
                    <xs:annotation><xs:documentation>渲染队列</xs:documentation></xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="Opaque" />
                            <xs:enumeration value="Transparent" />
                            <xs:enumeration value="Sky" />
                            <xs:enumeration value="Translucent" />
                            <xs:enumeration value="Gui" />
                            <xs:enumeration value="Inherit" />
                        </xs:restriction>
                    </xs:simpleType>
                </xs:attribute>
                <xs:attribute name="preferUnshaded" type="bool" use="optional">
                    <xs:annotation>
                        <xs:documentation>是否更希望模型以unshaded的方式来展示，该参数只是表示一个期望值，具体以实现为准。</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <!--Entity Object Base-->
    <xs:complexType name="entityBase" >
        <xs:complexContent>
            <xs:extension base="base">
                <xs:attribute ref="location" />
                <xs:attribute ref="rotation" />
                <xs:attribute ref="scale" />
                <xs:attribute ref="mat" />
                <xs:attribute name="name" type="xs:string" use="optional" />
                <xs:attribute name="objectDatas" type="xs:string" use="optional" >
                    <xs:annotation>
                        <xs:documentation>物体数据列表，格式: "objectData1|amount,objectData2|amount,...", 
                            其中amount指物体数量，这个参数只有对可量化的物体(CountObject)有意义,  该参数可以省略，
                            如："objectData1,objectData2"
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="modules" type="xs:string" use="optional" >
                    <xs:annotation>
                        <xs:documentation>物体功能模块列表，格式: "module1,module2,..."</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="attributes" type="xs:string" use="optional">
                    <xs:annotation>
                        <xs:documentation>
                            定义角色的所有属性值,格式如："attribute1,attribute2,attribute3,..."
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <!--All Object Base-->
    <xs:complexType name="base" >
        <xs:attribute name="id" type="xs:string" use="required" >
            <xs:annotation>
                <xs:documentation>给物品类型指定一个唯一标识</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="extends" type="xs:string" use="optional" >
            <xs:annotation>
                <xs:documentation>
                    继承，这个参数可以让当前的配置继承自另一个配置,这可以让定义
                    物体的时候更方便，很多相似物体可以继承自一个基物体，然后各自
                    保留一些特别参数。
                    继承的优先原则是：
                    1.先从被继承的定义中去查到所有参数配置。
                    2.再将自身中配置的参数覆盖继承过来的参数。
                    注：
                    1.当前不支持不同类型的继承，比如角色类型不能去继承技能类型的参数,但是不同的技能可以相继承
                    2.不允许无尽继承，比如 C -> B -> A -> C; 这会造成死继承，就像死循环，程序会报错。 
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="dataClass" type="xs:string" use="optional" >
            <xs:annotation><xs:documentation></xs:documentation></xs:annotation>
        </xs:attribute>
        <xs:attribute name="dataLoaderClass" type="xs:string" use="optional" >
            <xs:annotation><xs:documentation></xs:documentation></xs:annotation>
        </xs:attribute>
        <xs:attribute name="dataProcessorClass" type="xs:string" use="optional" >
            <xs:annotation><xs:documentation></xs:documentation></xs:annotation>
        </xs:attribute>
    </xs:complexType>
    
    <!-- 布尔类型 -->
    <xs:simpleType name="bool" >
        <xs:restriction base="xs:string">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
        </xs:restriction>
    </xs:simpleType>
    
    <!-- Animation的循环模式 -->
    <xs:simpleType name="loop" >
        <xs:restriction base="xs:string">
            <xs:enumeration value="loop"/>
            <xs:enumeration value="dontLoop"/>
            <xs:enumeration value="cycle"/>
        </xs:restriction>
    </xs:simpleType>
    
    <!-- ==== Attribute ==== -->
    
    <xs:attribute name="shadowMode">
        <xs:annotation><xs:documentation>投影模式，默认值Inherit</xs:documentation></xs:annotation>
        <xs:simpleType>
            <xs:restriction base="xs:string">
                <xs:enumeration value="Off" />
                <xs:enumeration value="Cast" />
                <xs:enumeration value="Receive" />
                <xs:enumeration value="CastAndReceive" />
                <xs:enumeration value="Inherit" />
            </xs:restriction>
        </xs:simpleType>
    </xs:attribute>
    
    <xs:attribute name="cullHint">
        <xs:annotation><xs:documentation>剪裁方式，默认值Inherit</xs:documentation></xs:annotation>
        <xs:simpleType>
            <xs:restriction base="xs:string">
                <xs:enumeration value="Inherit" />
                <xs:enumeration value="Dynamic" />
                <xs:enumeration value="Always" />
                <xs:enumeration value="Never" />
            </xs:restriction>
        </xs:simpleType>
    </xs:attribute>
                
    <xs:attribute name="queueBucket">
        <xs:annotation><xs:documentation>渲染队列</xs:documentation></xs:annotation>
        <xs:simpleType>
            <xs:restriction base="xs:string">
                <xs:enumeration value="Opaque" />
                <xs:enumeration value="Transparent" />
                <xs:enumeration value="Sky" />
                <xs:enumeration value="Translucent" />
                <xs:enumeration value="Gui" />
                <xs:enumeration value="Inherit" />
            </xs:restriction>
        </xs:simpleType>
    </xs:attribute>
    
    <xs:attribute name="file" type="xs:string">
        <xs:annotation>
            <xs:documentation>指定物品的模型文件路径，如：Models/trees/flower/flower1.j3o</xs:documentation>
        </xs:annotation>
    </xs:attribute>
    
    <xs:attribute name="icon" type="xs:string">
        <xs:annotation>
            <xs:documentation>给物品指定一个图标(64x64), 如：Interface/icon/gold.png.
                图标一般用于在物品栏中显示,如果没有图标，则显示为"MISS"
            </xs:documentation>
        </xs:annotation>
    </xs:attribute>
    
    <xs:attribute name="location" type="xs:string">
        <xs:annotation>
            <xs:documentation>位置，格式："x,y,z"</xs:documentation>
        </xs:annotation>
    </xs:attribute>
    
    <xs:attribute name="rotation" type="xs:string">
        <xs:annotation>
            <xs:documentation>旋转，格式："x,y,z", xyz分别表示以各个轴向上旋转的弧度数。</xs:documentation>
        </xs:annotation>
    </xs:attribute>
    
    <xs:attribute name="scale" type="xs:string">
        <xs:annotation>
            <xs:documentation>缩放，格式: "x,y,z"</xs:documentation>
        </xs:annotation>
    </xs:attribute>
    
    <xs:attribute name="debug">
        <xs:annotation>
            <xs:documentation>是否打开调试，0：关闭; 1：打开</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
            <xs:restriction base="xs:string">
                <xs:enumeration value="0"/>
                <xs:enumeration value="1"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:attribute>
    
    <!--Mat用于定义一个物体的构成成份，参数Define.xml的定义: see Skin, Entity-->
    <xs:attribute name="mat" type="xs:string" use="optional" >
        <xs:annotation>
            <xs:documentation>质地，参考：define.xml的定义</xs:documentation>
        </xs:annotation>
    </xs:attribute>
    
    <!--total用于那些可量化的物体: see Skin, Item-->
    <xs:attribute name="total" type="xs:integer" use="optional" >
        <xs:annotation><xs:documentation>物品数量.</xs:documentation></xs:annotation>
    </xs:attribute>
                
     <!--tradeInfos用于定义那些可交换、存在价值的物体: see Skin,Item-->
    <xs:attribute name="tradeInfos" type="xs:string" use="optional" >
        <xs:annotation>
            <xs:documentation> 
                物品的价值信息，可以理解为：要买这件物品时需要多少其它物品进行交换，参数格式："objectId|count,objectId|count,..."
                示例: tradeInfos="itemGold|100", 这表示这件物品值100个金币。
            </xs:documentation>
        </xs:annotation>
    </xs:attribute>
    
</xs:schema>

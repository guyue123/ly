<?xml version="1.0"?>
<!--
xs:string
xs:decimal
xs:integer
xs:boolean
xs:date
xs:time
-->

<xs:schema version="1.0"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           targetNamespace="http://luoying.huliqing.name"
           xmlns="http://luoying.huliqing.name"
           elementFormDefault="qualified">
    
    <xs:include schemaLocation="./base.xsd" />
    
    <xs:element name="root">
        <xs:complexType>
            <xs:all>
                <xs:element ref="elCustom" />
                <xs:element ref="elLNumber" />
                <xs:element ref="elSBoolean" />
                <xs:element ref="elSTBoolean" />
                <xs:element ref="elSTNumber" />
                <xs:element ref="elSkillHitNumber" />
            </xs:all>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="elCustom" >
        <xs:annotation>
            <xs:documentation>自定义表达式，参数随意，返回类型随意, 需要在程序中动态设置参数值。</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="elBase">
                    <xs:attribute name="expression" type="xs:string" use="required" >
                        <xs:annotation>
                            <xs:documentation>表达式，示例：#{s * 2}</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="elLNumber" >
        <xs:annotation>
            <xs:documentation>
                elLNumber表达式，这个表达式通过给定一个等级来计算一个等级值，比如用于计算在一个特定等级角色可以有多少攻击力等。
                表达式返回一个number数值。
                表达式要求：<br/>
                1.参数: l;
                2.返回值：number;
                示例：expression="#{0 + 50 * Math:pow(1.2, l)}"，其中“l"(小写的L)表示目标等级，是一个int类型的数值。
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="elBase">
                    <xs:attribute name="expression" type="xs:string" use="required" >
                        <xs:annotation>
                            <xs:documentation>表达式，示例：#{l * 2}</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="elSBoolean" >
        <xs:annotation>
            <xs:documentation>
                elSBoolean表达式，通过对象s的属性来判断是否可以使用一件物品或一个对象...，这个表达式返回一个boolean值。
                表达式要求：
                1.参数: s;
                2.返回值:boolean
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="elBase">
                    <xs:attribute name="expression" type="xs:string" use="required" >
                        <xs:annotation>
                            <xs:documentation>表达式示例，比如要求角色不能处于死亡状态才可以使用某物品：#{!s.attributeDead}</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="elSTBoolean" >
        <xs:annotation>
            <xs:documentation>
                elSTBoolean表达式通过对象的属性比较来检查一个对象s是否可以对另一个对象t产生作用,返回值是一个boolean值，用于判断
                对象s是否可以作用于对象t.
                表达式要求：
                1.参数: s, t;
                2.返回值: boolean;
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="elBase">
                    <xs:attribute name="expression" type="xs:string" use="required" >
                        <xs:annotation>
                            <xs:documentation>表达式示例，比如通过派系来判断角色s是否可以对t进行攻击：#{s.attributeGroup != t.attributeGroup}</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="elSTNumber" >
        <xs:annotation>
            <xs:documentation>
                elSTNumber表达式通过对象的属性计算一个作用值，用于计算一个对象s对另一个对象t的作用值，这个表达式返回一个number数值。
                表达式要求：
                1.参数：s, t;
                2.返回值: number (如byte,short,float,int,long, double等)
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="elBase">
                    <xs:attribute name="expression" type="xs:string" use="required" >
                        <xs:annotation>
                            <xs:documentation>表达式示例，比如计算伤害值：#{s.attributeAttack - t.attributeDefense}</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="elSkillHitNumber" >
        <xs:annotation>
            <xs:documentation>
                技能输出值计算公式, 这个公式用于为技能计算一个最终的输出值。例如，当角色A使用技能B攻击角色C时，
                这个公式将为这样的攻击输出计算出一个输出值，用于作用到受攻击者身上(目标C).表达式参数：
                s: 这个参数表示源对象,即攻击者;
                t: 这个参数表示目标对象,即受攻击者.
                skillHitValue: 技能的自身输出值,这是一个特殊参数值，来自于技能自身, 这个值的大小可能受技能自身等级的影响.
                返回值: number
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="elBase">
                    <xs:attribute name="expression" type="xs:string" use="required" >
                        <xs:annotation>
                            <xs:documentation>表达式示例，比如计算伤害值：#{s.attributeAttack + skillHitValue - t.attributeDefense}</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:complexType name="elBase">
        <xs:complexContent>
            <xs:extension base="base">
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
</xs:schema>
